# Step-by-Step Guide to Create Your Girish Lade Chatbot Flutter App

I'll guide you through the complete process of setting up and building your chatbot app. Please follow these steps in order:

## Step 1: Set Up Your Development Environment

Ensure you have Flutter installed and set up. If not, follow these commands:

```bash
# Check if Flutter is already installed
flutter --version

# If not installed, download and install Flutter from https://flutter.dev/docs/get-started/install
# Then run:
flutter doctor
```

## Step 2: Create New Flutter Project

```bash
# Create a new Flutter project
flutter create girish_lade_chatbot

# Navigate to the project directory
cd girish_lade_chatbot
```

## Step 3: Set Up Project Structure

Create the following folders in your project:

```bash
# From your project root, create these directories
mkdir -p lib/screens lib/widgets lib/models lib/services
mkdir -p assets/images
```

## Step 4: Add Dependencies

Edit your `pubspec.yaml` file to include these dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  provider: ^6.0.5
  http: ^1.1.0
  shared_preferences: ^2.2.0
  intl: ^0.18.1
  flutter_markdown: ^0.6.17
  
flutter:
  uses-material-design: true
  assets:
    - assets/images/
```

After editing, run:

```bash
flutter pub get
```

## Step 5: Add App Logo

Save the provided selfie image to `assets/images/logo.png`. You can do this by downloading the image from the URL you provided and renaming it.

## Step 6: Create Model Classes

Create `lib/models/message.dart`:

```dart
enum MessageType { user, bot }

class Message {
  final String text;
  final MessageType type;
  final DateTime timestamp;
  
  Message({
    required this.text,
    required this.type,
    DateTime? timestamp,
  }) : this.timestamp = timestamp ?? DateTime.now();
}
```

## Step 7: Create Services

Create `lib/services/chat_service.dart`:

```dart
import 'package:flutter/foundation.dart';
import '../models/message.dart';

class ChatService extends ChangeNotifier {
  List<Message> _messages = [];
  bool _isTyping = false;

  List<Message> get messages => _messages;
  bool get isTyping => _isTyping;

  // Initial welcome message
  ChatService() {
    _addBotMessage("Hi! I'm your AI buddy. Let's chat about anything!");
  }

  void sendMessage(String text) {
    if (text.trim().isEmpty) return;
    
    // Add user message
    _messages.add(Message(
      text: text,
      type: MessageType.user,
    ));
    
    // Bot is typing
    _isTyping = true;
    notifyListeners();
    
    // Simulate response delay
    Future.delayed(Duration(milliseconds: 1000), () {
      _respondToMessage(text);
      _isTyping = false;
      notifyListeners();
    });
  }

  void _respondToMessage(String message) {
    String response = _generateResponse(message);
    _addBotMessage(response);
  }

  void _addBotMessage(String text) {
    _messages.add(Message(
      text: text,
      type: MessageType.bot,
    ));
    notifyListeners();
  }

  String _generateResponse(String message) {
    // Simple rule-based responses
    message = message.toLowerCase();
    
    if (message.contains('hello') || message.contains('hi')) {
      return "Hello! How can I help you today?";
    } else if (message.contains('who are you') || message.contains('your name')) {
      return "I'm Girish Lade's AI assistant, created to help answer your questions!";
    } else if (message.contains('about')) {
      return "Girish Lade was founded in 2025 by Girish Lade.";
    } else if (message.contains('help')) {
      return "I can answer questions about Girish Lade. Try asking about the company, services, or anything else you'd like to know!";
    } else {
      return "I'm still learning about that topic. Would you like to know more about Girish Lade?";
    }
  }

  List<String> getSuggestedQuestions() {
    return [
      "Who is Girish Lade?",
      "Tell me about your company",
      "What services do you offer?",
      "How can you help me?",
    ];
  }
}
```

## Step 8: Create Widgets

Create `lib/widgets/chat_message.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import '../models/message.dart';

class ChatMessage extends StatelessWidget {
  final Message message;

  const ChatMessage({Key? key, required this.message}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isUser = message.type == MessageType.user;
    
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!isUser) _buildAvatar(),
          SizedBox(width: 8),
          _buildMessageBubble(context, isUser),
          SizedBox(width: 8),
          if (isUser) _buildUserAvatar(),
        ],
      ),
    );
  }

  Widget _buildAvatar() {
    return CircleAvatar(
      backgroundImage: AssetImage('assets/images/logo.png'),
      radius: 16,
    );
  }

  Widget _buildUserAvatar() {
    return CircleAvatar(
      backgroundColor: Colors.redAccent,
      child: Icon(Icons.person, color: Colors.white, size: 18),
      radius: 16,
    );
  }

  Widget _buildMessageBubble(BuildContext context, bool isUser) {
    return Flexible(
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 10),
        decoration: BoxDecoration(
          color: isUser ? Colors.red.shade100 : Colors.grey.shade200,
          borderRadius: BorderRadius.circular(20),
        ),
        child: MarkdownBody(
          data: message.text,
          styleSheet: MarkdownStyleSheet(
            p: TextStyle(
              color: Colors.black87,
              fontSize: 16,
            ),
          ),
        ),
      ),
    );
  }
}
```

Create `lib/widgets/message_input.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/chat_service.dart';

class MessageInput extends StatefulWidget {
  @override
  _MessageInputState createState() => _MessageInputState();
}

class _MessageInputState extends State<MessageInput> {
  final _textController = TextEditingController();
  bool _isComposing = false;

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  void _handleSubmitted(String text) {
    _textController.clear();
    setState(() {
      _isComposing = false;
    });
    
    final chatService = Provider.of<ChatService>(context, listen: false);
    chatService.sendMessage(text);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8.0),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        boxShadow: [
          BoxShadow(
            color: Colors.black12,
            blurRadius: 8,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: _textController,
                onChanged: (text) {
                  setState(() {
                    _isComposing = text.trim().isNotEmpty;
                  });
                },
                onSubmitted: _isComposing ? _handleSubmitted : null,
                decoration: InputDecoration(
                  hintText: 'Send a message...',
                  border: InputBorder.none,
                  contentPadding: EdgeInsets.all(16),
                ),
              ),
            ),
            IconButton(
              icon: Icon(Icons.send),
              onPressed: _isComposing
                  ? () => _handleSubmitted(_textController.text)
                  : null,
              color: _isComposing ? Colors.red : Colors.grey,
            ),
          ],
        ),
      ),
    );
  }
}
```

Create `lib/widgets/suggested_question.dart`:

```dart
import 'package:flutter/material.dart';

class SuggestedQuestion extends StatelessWidget {
  final String question;
  final VoidCallback onTap;

  const SuggestedQuestion({
    Key? key,
    required this.question,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(right: 8),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(20),
        child: Container(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.red.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: Colors.red.withOpacity(0.3)),
          ),
          child: Text(
            question,
            style: TextStyle(
              color: Colors.red.shade800,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
    );
  }
}
```

## Step 9: Create Screens

Create `lib/screens/about_screen.dart`:

```dart
import 'package:flutter/material.dart';

class AboutScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('About Us'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Company Name: Girish Lade',
              style: Theme.of(context).textTheme.headline6,
            ),
            SizedBox(height: 16),
            Text(
              'Founded in: 2025 by Girish Lade',
              style: Theme.of(context).textTheme.bodyText1,
            ),
            SizedBox(height: 24),
            Divider(),
            SizedBox(height: 24),
            Text(
              'About Girish Lade Chatbot',
              style: Theme.of(context).textTheme.headline6,
            ),
            SizedBox(height: 16),
            Text(
              'Girish Lade Chatbot is an AI assistant designed to help users get information and assistance through natural conversation. The chatbot can answer questions about Girish Lade, provide company information, and assist with various inquiries.',
              style: Theme.of(context).textTheme.bodyText1,
            ),
            SizedBox(height: 16),
            Text(
              'Note: This chatbot is still learning and may not have all the answers. Always verify important information.',
              style: TextStyle(
                fontStyle: FontStyle.italic,
                color: Colors.black54,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

Create `lib/screens/chat_screen.dart`:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/chat_service.dart';
import '../widgets/chat_message.dart';
import '../widgets/message_input.dart';
import '../widgets/suggested_question.dart';
import 'about_screen.dart';

class ChatScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            CircleAvatar(
              backgroundImage: AssetImage('assets/images/logo.png'),
              radius: 18,
            ),
            SizedBox(width: 10),
            Text('Girish Lade Chatbot'),
          ],
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => AboutScreen()),
              );
            },
          ),
        ],
      ),
      body: Column(
        children: [
          _buildWelcomeSection(context),
          Expanded(
            child: _buildChatSection(context),
          ),
          _buildSuggestedQuestions(context),
          MessageInput(),
        ],
      ),
    );
  }

  Widget _buildWelcomeSection(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(12),
      color: Colors.red.withOpacity(0.1),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Welcome to Girish Lade Chatbot!',
            style: Theme.of(context).textTheme.headline6,
          ),
          SizedBox(height: 4),
          Text(
            'Girish Lade can make mistakes. Consider checking important information.',
            style: TextStyle(
              fontSize: 12,
              color: Colors.black54,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChatSection(BuildContext context) {
    final chatService = Provider.of<ChatService>(context);
    
    return ListView.builder(
      reverse: true,
      padding: EdgeInsets.all(16),
      itemCount: chatService.messages.length,
      itemBuilder: (context, index) {
        final message = chatService.messages[chatService.messages.length - 1 - index];
        return ChatMessage(message: message);
      },
    );
  }

  Widget _buildSuggestedQuestions(BuildContext context) {
    final chatService = Provider.of<ChatService>(context);
    final questions = chatService.getSuggestedQuestions();
    
    return Container(
      padding: EdgeInsets.symmetric(vertical: 8),
      height: 60,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        padding: EdgeInsets.symmetric(horizontal: 16),
        itemCount: questions.length,
        itemBuilder: (context, index) {
          return SuggestedQuestion(
            question: questions[index],
            onTap: () {
              chatService.sendMessage(questions[index]);
            },
          );
        },
      ),
    );
  }
}
```

## Step 10: Update Main App File

Replace the content of `lib/main.dart` with:

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'screens/chat_screen.dart';
import 'services/chat_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => ChatService(),
      child: MaterialApp(
        title: 'Girish Lade Chatbot',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          primarySwatch: Colors.red,
          scaffoldBackgroundColor: Colors.white,
          appBarTheme: AppBarTheme(
            backgroundColor: Colors.red,
            elevation: 0,
          ),
          textTheme: TextTheme(
            headline6: TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
            bodyText1: TextStyle(
              fontSize: 16,
              color: Colors.black87,
            ),
          ),
        ),
        home: ChatScreen(),
      ),
    );
  }
}
```

## Step 11: Set Up App Icon

1. Create a `flutter_launcher_icons.yaml` file in your project root:

```yaml
flutter_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/images/logo.png"
  adaptive_icon_background: "#FFFFFF"
  adaptive_icon_foreground: "assets/images/logo.png"
```

2. Add this dependency to your `pubspec.yaml` in the dev_dependencies section:

```yaml
dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_launcher_icons: ^0.13.1
```

3. Run the following command:

```bash
flutter pub get
flutter pub run flutter_launcher_icons
```

## Step 12: Run Your App

Run your app with:

```bash
flutter run
```

## Troubleshooting Common Issues

1. **Image not showing**: Make sure the path to the logo.png file is correct and the file exists
2. **Dependency issues**: Try `flutter clean` followed by `flutter pub get`
3. **Compilation errors**: Check for typos in the code or missing imports
4. **UI not rendering properly**: Ensure you're using the correct widget hierarchy

## Next Steps After Basic Setup

Once you have the basic app running, you can enhance it with:

1. **Connect to a backend**: Replace the mock responses with API calls to a real backend service
2. **Add user authentication**: Implement login/signup functionality
3. **Improve chat features**: Add message timestamps, read receipts, etc.
4. **Store chat history**: Use SharedPreferences or a database to persist chats
5. **Add animations**: Make the UI more engaging with subtle animations

## App Screenshots

Once your app is running, it should have:
- A main chat screen with your logo at the top
- A welcome message
- Suggested questions
- A text input field
- An About screen accessible from the info icon

The design follows Material guidelines with a red theme to match the aesthetics of your image.

Would you like me to explain any particular part of the implementation in more detail?
